/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'MAYAN' at '1/21/16 7:45 PM' with Gradle 1.9
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/1.9/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin:'java'
apply plugin:'application'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'maven central' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.5'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.11'
}
//task configure << {
//def pos = new java.text.FieldPosition(10)
//apply from: 'other.gradle',to:pos


/* println pos.beginIndex
println pos.endIndex
}
configurations.runtime.each { File f -> println f }

println project.buildDir
println getProject().getBuildDir()

task(copy,type:Copy){
from(file('srcDir'))
println srcDir
println buildDir
into(buildDir)
} */
// Configuring a task - with closure
//task myCopy(type: Copy)

//myCopy {
 //  from 'resources'
   //into 'target'
  // include('**/*.txt', '**/*.xml', '**/*.properties')
//}

task taskX << {
    println 'taskX'
}

task apple1 << {
    println 'apple time'
}
task apple2 << {
description 'printing apple time number'
    println '2 apple time'
}
task apple3(dependsOn: 'apple2') << {
    println '3 apple time'
}
//taskX.dependsOn{
//tasks.findAll{task -> task.name.startsWith('apple')}
//}
//apple1.mustRunAfter apple2
//apple2.shouldRunAfter apple3

//task apple1(overwrite:true) << {
//println "its overwrited now" }
//apple1.onlyIf{!project.hasProperty('skipHello')}

/* apple2.doFirst {
if(2==2){
throw new StopExecutionException()
} }
*/
//apple2.enabled=false

/* tasks.addRule("rule1:ruler"){
String taskName -> if(taskName.startsWith('app'))
{
task(taskName) << {
println "task running: "+taskName
}
}
} */



//apple1.finalizedBy apple3

/* FileCollection collection = files('src/first.txt','src/second.txt','src/third.txt')

collection.each{File file->
println file.name
}
*/
/*
FileTree tree = fileTree(dir:'src',include:'**/*.txt')

tree.each{
File file ->
println file
}

*/
FileTree zip = zipTree(abc.zip)


